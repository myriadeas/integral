<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    ">

	<cxf:rsServer id="assetManagerRsServer" address="/assetmanager"
		serviceClass="my.com.myriadeas.integral.assetmanager.interfaces.rest.service.AssetManagementRestServiceImpl"
		loggingFeatureEnabled="true" loggingSizeLimit="20">
		<cxf:inInterceptors>
			<bean class="org.apache.cxf.jaxrs.provider.jsonp.JsonpInInterceptor" />
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<bean class="org.apache.cxf.jaxrs.provider.jsonp.JsonpPreStreamInterceptor" />
			<bean
				class="org.apache.cxf.jaxrs.provider.jsonp.JsonpPostStreamInterceptor" />
		</cxf:outInterceptors>
		<cxf:providers>
			<bean id="yogaJsonProvider"
				class="org.skyscreamer.yoga.jaxrs.view.builder.JsonSelectorMessageBodyWriter"></bean>
			<bean id="jsonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" />

			<bean id="cors-filter"
				class="org.apache.cxf.rs.security.cors.CrossOriginResourceSharingFilter" />
		</cxf:providers>
	</cxf:rsServer>

	<camelContext id="assetManagerServiceRoute" xmlns="http://camel.apache.org/schema/spring">
		<template id="assetManagerProducerTemplate"/>
		<onException>
			<exception>my.com.myriadeas.integral.core.IntegralBusinessLogicException
			</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<bean ref="integralBusinessLogicExceptionRestHandler" method="handle" />
		</onException>
		<onException>
			<exception>java.lang.RuntimeException
			</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<bean ref="globalExceptionHandler" method="handle" />
		</onException>
		<intercept>
			<to uri="log:my.com.myriadeas.integral.assetmanager" />
		</intercept>

		<!-- List of REST Api -->
		<route>
			<from
				uri="cxfrs://bean://assetManagerRsServer?bindingStyle=SimpleConsumer" />
			<!-- We can remove this configure as the CXFRS producer is using the HttpAPI 
				by default -->
			<setHeader headerName="CamelCxfRsUsingHttpAPI">
				<constant>True</constant>
			</setHeader>
			<recipientList>
				<simple>direct:assetmanager.${header.operationName}</simple>
			</recipientList>
			<removeHeaders pattern="*" />
		</route>
		<route>
			<from uri="direct://assetmanager.welcome" />
			<to uri="log:my.com.myriadeas" />
			<to uri="mock:assetmanager" />
		</route>
		
		<route>
			<from uri="direct://assetmanager.createItem" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:assetManagerFacade?method=createItem" />
			<to uri="mock:assetmanager.create" />
		</route>

		<route>
			<from uri="direct://assetmanager.receiveItem" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:assetManagerFacade?method=receiveItem" />
			<to uri="mock:assetmanager.receive" />
		</route>
		
		<route>
			<from uri="direct://assetmanager.releaseItem" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:assetManagerFacade?method=releaseItem" />
			<to uri="mock:assetmanager.release" />
		</route>
		
		<route>
			<from uri="direct://assetmanager.unreleaseItem" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:assetManagerFacade?method=unreleaseItem" />
			<to uri="mock:assetmanager.unrelease" />
		</route>

		<route>
			<from uri="direct://assetmanager.deleteItem" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:assetManagerFacade?method=deleteItem" />
			<to uri="mock:assetmanager.delete" />
		</route>
		
				
		<route>
			<from uri="vm:assetmanager.itemReceived?multipleConsumers=true" />
			<to uri="bean:assetManagerWriteService?method=create" />
		</route>

	</camelContext>
</beans>
