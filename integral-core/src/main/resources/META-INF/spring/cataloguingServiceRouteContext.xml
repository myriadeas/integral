<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
    ">
	
	<bean id="jsonMarcDataFormatDefinition" class="org.apache.camel.model.DataFormatDefinition">
		<property name="dataFormat" ref="jsonMarcDataFormat"></property>
	</bean>


	<bean id="jsonMarcDataFormat"
		class="my.com.myriadeas.integral.mystic.dataformat.JsonMarcDataFormat" />

	<cxf:rsServer id="cataloguingRsServer" address="/cataloguing"
		serviceClass="my.com.myriadeas.integral.cataloguing.rest.service.impl.CataloguingServiceRestServiceImpl"
		loggingFeatureEnabled="true" loggingSizeLimit="20">
		<cxf:inInterceptors>
			<bean class="org.apache.cxf.jaxrs.provider.jsonp.JsonpInInterceptor" />
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<bean class="org.apache.cxf.jaxrs.provider.jsonp.JsonpPreStreamInterceptor" />
			<bean
				class="org.apache.cxf.jaxrs.provider.jsonp.JsonpPostStreamInterceptor" />
		</cxf:outInterceptors>
		<cxf:providers>
			<bean id="jsonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" />
			<bean id="cors-filter"
				class="org.apache.cxf.rs.security.cors.CrossOriginResourceSharingFilter" />
		</cxf:providers>
	</cxf:rsServer>
	<camelContext id="cataloguingServiceRoute" xmlns="http://camel.apache.org/schema/spring">
		<onException>
			<exception>my.com.myriadeas.integral.core.IntegralBusinessLogicException
			</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<bean ref="integralBusinessLogicExceptionRestHandler" method="handle" />
		</onException>
		<onException>
			<exception>java.lang.RuntimeException
			</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<bean ref="globalExceptionHandler" method="handle" />
		</onException>
		<intercept>
			<to uri="log:my.com.myridaeas.integral.cataloguing" />
		</intercept>
		<route>

			<from
				uri="cxfrs://bean://cataloguingRsServer?bindingStyle=SimpleConsumer" />
			<!-- We can remove this configure as the CXFRS producer is using the HttpAPI 
				by default -->
			<setHeader headerName="CamelCxfRsUsingHttpAPI">
				<constant>True</constant>
			</setHeader>
			<recipientList>
				<simple>direct:cataloguing.${header.operationName}</simple>
			</recipientList>
			<removeHeaders pattern="*" />
		</route>
		
		<route>
			<from uri="direct://cataloguing.uploadMarc" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:marcService?method=uploadFile(${header.file}, ${header.library}, ${header.userid})" />
			<marshal ref="jsonMarcDataFormatDefinition"/>
			<removeHeaders pattern="*" />
		</route>

		<route>
			<from uri="direct://cataloguing.list" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:marcService?method=list(${header.library}, ${header.userid})" />
		</route>

		<route>
			<from uri="direct://cataloguing.create" />
			<to uri="log:my.com.myriadeas" />
            <unmarshal ref="jsonMarcDataFormatDefinition"/>
			<to
				uri="bean:marcService?method=create(${header.library}, ${header.userid}, ${body})" />
            <marshal ref="jsonMarcDataFormatDefinition"/>
            <to uri="mock:cataloguing.create"/>
		</route>

		<route>
			<from uri="direct://cataloguing.retrieve" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:marcService?method=retrieve(${header.library}, ${header.userid}, ${header.marcid})" />
			<marshal ref="jsonMarcDataFormatDefinition"/>
		</route>

		<route>
			<from uri="direct://cataloguing.update" />
			<to uri="log:my.com.myriadeas" />
			<unmarshal ref="jsonMarcDataFormatDefinition"/>
			<to
				uri="bean:marcService?method=update(${header.library}, ${header.userid}, ${header.marcid}, ${body})" />
			<marshal ref="jsonMarcDataFormatDefinition"/>
		</route>

		<route>
			<from uri="direct://cataloguing.delete" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:marcService?method=delete(${header.library}, ${header.userid}, ${header.marcid})" />
			<marshal ref="jsonMarcDataFormatDefinition"/>
		</route>

		<route>
			<from uri="direct://cataloguing.verify" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:marcService?method=verify(${header.library}, ${header.userid}, ${body})" />
		</route>

		<route>
			<from uri="direct://cataloguing.convert" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:marcService?method=convert(${header.library}, ${header.userid}, ${body})" />
		</route>

		<route>
			<from uri="direct://cataloguing.checkDuplicate" />
			<to uri="log:my.com.myriadeas" />
			<unmarshal ref="jsonMarcDataFormatDefinition"/>
			<to
				uri="bean:marcService?method=checkDuplicate(${header.library}, ${header.userid}, ${header.tag}, ${body})" />
		</route>

		<route>
			<from uri="direct://cataloguing.getFromSolr" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:marcService?method=getFromSolr(${header.id})" />
		</route>

		<route>
			<from uri="direct://cataloguing.getTitleFromSolr" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:marcService?method=getTitleFromSolr(${header.id})" />
		</route>

		<route>
			<from uri="direct://cataloguing.getBibFromSolr" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:marcService?method=getBibFromSolr(${header.id}, ${header.tag})" />
		</route>

		<route>
			<from uri="direct://cataloguing.querySolr" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:marcService?method=querySolr(${header.query})" />
		</route>
		
		<route>
			<from uri="direct://cataloguing.querySolrOri" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:marcService?method=querySolrOri(${header.q})" />
		</route>
		
		<route>
			<from uri="direct://cataloguing.querySolrGetMaterials" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:marcService?method=querySolrGetMaterials(${header.q})" />
		</route>

		<route>
			<from uri="direct://cataloguing.getTitleFromMaterial" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:marcService?method=getTitleFromMaterial(${header.id})" />
		</route>

		<route>
			<from uri="direct://cataloguing.getBibFromMaterial" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:marcService?method=getBibFromMaterial(${header.id}, ${header.tag})" />
		</route>

		<route>
			<from uri="direct://cataloguing.listTemplates" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:templateService?method=list(${header.library}, ${header.userid})" />
		</route>

		<route>
			<from uri="direct://cataloguing.createTemplate" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:templateService?method=create(${header.library}, ${header.userid}, ${header.templateid}, ${body})" />
		</route>

		<route>
			<from uri="direct://cataloguing.retrieveTemplate" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:templateService?method=retrieve(${header.library}, ${header.userid}, ${header.templateid})" />
		</route>

		<route>
			<from uri="direct://cataloguing.updateTemplate" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:templateService?method=update(${header.library}, ${header.userid}, ${header.templateid}, ${body})" />
		</route>

		<route>
			<from uri="direct://cataloguing.deleteTemplate" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:templateService?method=delete(${header.library}, ${header.userid}, ${header.templateid})" />
		</route>
		
		<route>
			<from uri="vm:event.cataloguing.update" />
            <to uri="bean:pendingUpdateHandler?method=handle" />
		</route>
		
		<route>
			<from uri="vm:event.cataloguing.delete" />
            <to uri="bean:pendingDeleteHandler?method=handle" />
		</route>

	</camelContext>
</beans>
