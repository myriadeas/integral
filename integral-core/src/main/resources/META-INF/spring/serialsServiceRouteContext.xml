<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
    ">
	<cxf:rsServer id="serialsRsServer" address="/serials"
		serviceClass="my.com.myriadeas.integral.serials.rest.service.impl.SerialsServiceRestServiceImpl"
		loggingFeatureEnabled="true" loggingSizeLimit="20">
		<cxf:inInterceptors>
			<bean class="org.apache.cxf.jaxrs.provider.jsonp.JsonpInInterceptor" />
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<bean class="org.apache.cxf.jaxrs.provider.jsonp.JsonpPreStreamInterceptor" />
			<bean
				class="org.apache.cxf.jaxrs.provider.jsonp.JsonpPostStreamInterceptor" />
		</cxf:outInterceptors>
		<cxf:providers>
			<bean id="jsonProvider" class="org.codehaus.jackson.jaxrs.JacksonJsonProvider" />
			<bean id="cors-filter"
				class="org.apache.cxf.rs.security.cors.CrossOriginResourceSharingFilter" />
		</cxf:providers>
	</cxf:rsServer>
	<camelContext id="serialsServiceRoute" xmlns="http://camel.apache.org/schema/spring">
		<template id="integralProducerTemplate" />
		<onException>
			<exception>my.com.myriadeas.integral.core.IntegralBusinessLogicException
			</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<bean ref="integralBusinessLogicExceptionRestHandler" method="handle" />
		</onException>
		<onException>
			<exception>java.lang.RuntimeException
			</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<bean ref="globalExceptionHandler" method="handle" />
		</onException>
		<intercept>
			<to uri="log:my.com.myridaeas.integral.serials" />
		</intercept>
		<route>
			<from uri="cxfrs://bean://serialsRsServer?bindingStyle=SimpleConsumer" />
			<!-- We can remove this configure as the CXFRS producer is using the HttpAPI 
				by default -->
			<setHeader headerName="CamelCxfRsUsingHttpAPI">
				<constant>True</constant>
			</setHeader>
			<recipientList>
				<simple>direct:${header.operationName}</simple>
			</recipientList>
			<removeHeaders pattern="*" />
		</route>
		<route>
			<from uri="direct://addRequest" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:serialsRequestServiceFacade?method=saveRequest(${body})" />
			<to uri="mock:addRequestResult" />
		</route>

		<route>
			<from uri="direct://editRequest" />
			<to uri="log:my.com.myriadeas" />
			<to uri="direct://request.edit.validate" />
			<to uri="bean:serialsRequestServiceFacade?method=editRequest(${body})" />
			<to uri="mock:editRequestResult" />
		</route>

		<route>
			<from uri="direct://deleteRequest" />
			<to uri="log:my.com.myriadeas" />
			<to uri="direct://request.delete.validate" />
			<to uri="bean:serialsRequestServiceFacade?method=deleteRequest(${body})" />
			<to uri="mock:deleteRequestResult" />
		</route>

		<route>
			<from uri="direct://request.edit.validate" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:editRequestValidator?method=validate" />
		</route>

		<route>
			<from uri="direct://request.delete.validate" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:deleteRequestValidator?method=validate" />
		</route>

		<route>
			<from uri="direct://listRequestByStatus" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:serialsRequestServiceFacade?method=listRequestsByStatus(${header.sestat})" />
			<to uri="mock:listRequestByStatusResult" />
		</route>

		<route>
			<from uri="direct://submitRequestForReview" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:serialsRequestServiceFacade?method=submitRequestForReview(${body})" />
			<to uri="mock:submitForReviewResult" />
		</route>

		<route>
			<from uri="direct://authorizePurchase" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:serialsRequestServiceFacade?method=authorizePurchase(${body}, ${header.decision})" />
			<to uri="mock:authorizePurchaseResult" />
		</route>

		<route>
			<from uri="direct://batchAuthorizePurchase" />
			<to uri="log:my.com.myriadeas" />
			<to
				uri="bean:serialsRequestServiceFacade?method=authorizePurchase(${body}, ${header.decision})" />
			<to uri="mock:authorizePurchaseResult" />
		</route>

		<route>
			<from uri="vm:event.new.request" />
			<to uri="log:my.com.myriadeas" />
			<to uri="bean:newRequestHandler?method=handle" />
			<to uri="mock:newRequestHandlerResult" />
		</route>
	</camelContext>
</beans>
