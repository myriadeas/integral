<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- CAS Authentication Filter will create a filter to authenticate -->
	<!-- Enable security, let the casAuthenticationEntryPoint handle all intercepted 
		urls. The CAS_FILTER needs to be in the right position within the filter 
		chain. -->
	<security:http pattern="/services/i18n/**" security="none" />
	<security:http entry-point-ref="casAuthenticationEntryPoint"
		authentication-manager-ref="casAuthenticationManager">
		<security:intercept-url pattern="/repository/**"
			access="ROLE_GUEST" />
		<security:intercept-url pattern="/services/**"
			access="ROLE_GUEST" />
		<security:intercept-url pattern="/dev/**"
			access="ROLE_GUEST" />
		<security:logout invalidate-session="true"
			logout-success-url="/j_spring_cas_security_logout" delete-cookies="JSESSIONID" />
		<security:custom-filter ref="requestSingleLogoutFilter"
			before="LOGOUT_FILTER" />
		<security:custom-filter ref="singleLogoutFilter"
			before="CAS_FILTER" />
		<security:custom-filter position="CAS_FILTER"
			ref="casAuthenticationFilter"></security:custom-filter>
	</security:http>

	<!-- Required for the casProcessingFilter, so define it explicitly set and 
		specify an Id Even though the authenticationManager is created by default 
		when namespace based config is used. -->
	<security:authentication-manager id="casAuthenticationManager">
		<security:authentication-provider
			ref="casAuthenticationProvider"></security:authentication-provider>
	</security:authentication-manager>


	<bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<property name="service"
			value="http://${cas.service}/j_spring_cas_security_check" />
		<property name="authenticateAllArtifacts" value="true" />
	</bean>

	<bean id="casAuthenticationFilter"
		class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<property name="authenticationManager" ref="casAuthenticationManager" />
		<property name="serviceProperties" ref="serviceProperties" />
		<property name="proxyGrantingTicketStorage" ref="pgtStorage" />
		<property name="proxyReceptorUrl" value="/j_spring_cas_security_proxyreceptor" />
		<property name="authenticationDetailsSource">
			<bean
				class="org.springframework.security.cas.web.authentication.ServiceAuthenticationDetailsSource" />
		</property>
	</bean>

	<bean id="casAuthenticationEntryPoint"
		class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<property name="loginUrl" value="https://${cas.host}/login" />
		<property name="serviceProperties" ref="serviceProperties" />
	</bean>
	<bean id="casAuthenticationProvider"
		class="org.springframework.security.cas.authentication.CasAuthenticationProvider">

		<property name="serviceProperties" ref="serviceProperties" />
		<property name="authenticationUserDetailsService">
			<bean
				class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
				<constructor-arg ref="integralUserDetailsServiceJpaImpl" />
			</bean>
		</property>
		<property name="ticketValidator">
			<bean class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator">
				<property name="acceptAnyProxy" value="true" />
				<property name="proxyCallbackUrl"
					value="https://${cas.service}/j_spring_cas_security_proxyreceptor" />
				<property name="proxyGrantingTicketStorage" ref="pgtStorage" />
				<constructor-arg value="https://${cas.host}" />
			</bean>
		</property>
		<property name="key" value="integral-mystic" />
		<property name="statelessTicketCache">
			<bean
				class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
				<property name="cache">
					<bean class="net.sf.ehcache.Cache" init-method="initialise"
						destroy-method="dispose">
						<constructor-arg value="casTickets" />
						<constructor-arg value="50" />
						<constructor-arg value="true" />
						<constructor-arg value="false" />
						<constructor-arg value="3600" />
						<constructor-arg value="900" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	<!-- NOTE: In a real application you should not use an in memory implementation. 
		You will also want to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup() -->
	<bean id="pgtStorage"
		class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl" />

	<!-- This filter handles a Single Logout Request from the CAS Server -->
	<bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter" />
	<!-- This filter redirects to the CAS Server to signal Single Logout should 
		be performed -->
	<bean id="requestSingleLogoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="https://${cas.host}/logout" />
		<constructor-arg>
			<bean
				class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
		</constructor-arg>
		<property name="filterProcessesUrl" value="/j_spring_cas_security_logout" />
	</bean>


</beans>
